<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DSharpPlus.Rest</name>
    </assembly>
    <members>
        <member name="P:DSharpPlus.DiscordRestClient.Guilds">
            <summary>
            Gets the dictionary of guilds cached by this client.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.InitializeCacheAsync">
            <summary>
            Initializes cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateScheduledGuildEventAsync(System.UInt64,System.String,System.String,System.Nullable{System.UInt64},DSharpPlus.Entities.ScheduledGuildEventType,DSharpPlus.Entities.ScheduledGuildEventPrivacyLevel,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Creates a new scheduled guild event.
            </summary>
            <param name="guildId">The guild to create an event on.</param>
            <param name="name">The name of the event, up to 100 characters.</param>
            <param name="description">The description of the event, up to 1000 characters.</param>
            <param name="channelId">The channel the event will take place in, if applicable.</param>
            <param name="type">The type of event. If <see cref="F:DSharpPlus.Entities.ScheduledGuildEventType.External"/>, a end time must be specified.</param>
            <param name="privacyLevel">The privacy level of the event.</param>
            <param name="start">When the event starts. Must be in the future and before the end date, if specified.</param>
            <param name="end">When the event ends. Required for <see cref="F:DSharpPlus.Entities.ScheduledGuildEventType.External"/></param>
            <param name="location">Where this location takes place.</param>
            <returns>The created event.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteScheduledGuildEventAsync(System.UInt64,System.UInt64)">
            <summary>
            Delete a scheduled guild event.
            </summary>
            <param name="guildId">The ID the guild the event resides on.</param>
            <param name="eventId">The ID of the event to delete.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetScheduledGuildEventAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a specific scheduled guild event.
            </summary>
            <param name="guildId">The ID of the guild the event resides on.</param>
            <param name="eventId">The ID of the event to get</param>
            <returns>The requested event.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetScheduledGuildEventsAsync(System.UInt64)">
            <summary>
            Gets all available scheduled guild events.
            </summary>
            <param name="guildId">The ID of the guild to query.</param>
            <returns>All active and scheduled events.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyScheduledGuildEventAsync(System.UInt64,System.UInt64,System.Action{DSharpPlus.Net.Models.ScheduledGuildEventEditModel})">
            <summary>
            Modify a scheduled guild event.
            </summary>
            <param name="guildId">The ID of the guild the event resides on.</param>
            <param name="eventId">The ID of the event to modify.</param>
            <param name="mdl">The action to apply to the event.</param>
            <returns>The modified event.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetScheduledGuildEventUsersAsync(System.UInt64,System.UInt64,System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets the users interested in the guild event.
            </summary>
            <param name="guildId">The ID of the guild the event resides on.</param>
            <param name="eventId">The ID of the event.</param>
            <param name="limit">How many users to query.</param>
            <param name="after">Fetch users after this ID.</param>
            <param name="before">Fetch users before this ID.</param>
            <returns>The users interested in the event.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.SearchMembersAsync(System.UInt64,System.String,System.Nullable{System.Int32})">
            <summary>
            Searches the given guild for members who's display name start with the specified name.
            </summary>
            <param name="guild_id">The ID of the guild to search.</param>
            <param name="name">The name to search for.</param>
            <param name="limit">The maximum amount of members to return. Max 1000. Defaults to 1.</param>
            <returns>The members found, if any.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildAsync(System.String,System.String,System.String,System.Nullable{DSharpPlus.Entities.VerificationLevel},System.Nullable{DSharpPlus.Entities.DefaultMessageNotifications},System.Nullable{DSharpPlus.SystemChannelFlags})">
            <summary>
            Creates a new guild
            </summary>
            <param name="name">New guild's name</param>
            <param name="region_id">New guild's region ID</param>
            <param name="iconb64">New guild's icon (base64)</param>
            <param name="verification_level">New guild's verification level</param>
            <param name="default_message_notifications">New guild's default message notification level</param>
            <param name="system_channel_flags">New guild's system channel flags</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildFromTemplateAsync(System.String,System.String,System.String)">
            <summary>
            Creates a guild from a template. This requires the bot to be in less than 10 guilds total.
            </summary>
            <param name="code">The template code.</param>
            <param name="name">Name of the guild.</param>
            <param name="icon">Stream containing the icon for the guild.</param>
            <returns>The created guild.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGuildAsync(System.UInt64)">
            <summary>
            Deletes a guild
            </summary>
            <param name="id">Guild ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildAsync(System.UInt64,DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{DSharpPlus.Entities.VerificationLevel},DSharpPlus.Entities.Optional{DSharpPlus.Entities.DefaultMessageNotifications},DSharpPlus.Entities.Optional{DSharpPlus.Entities.MfaLevel},DSharpPlus.Entities.Optional{DSharpPlus.Entities.ExplicitContentFilter},DSharpPlus.Entities.Optional{System.Nullable{System.UInt64}},DSharpPlus.Entities.Optional{System.Int32},DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.UInt64},DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.Nullable{System.UInt64}},DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.Collections.Generic.IEnumerable{System.String}},DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.Nullable{System.UInt64}},DSharpPlus.Entities.Optional{System.Nullable{System.UInt64}},DSharpPlus.Entities.Optional{DSharpPlus.SystemChannelFlags},System.String)">
            <summary>
            Modifies a guild
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="name">New guild Name</param>
            <param name="region">New guild voice region</param>
            <param name="verification_level">New guild verification level</param>
            <param name="default_message_notifications">New guild default message notification level</param>
            <param name="mfa_level">New guild MFA level</param>
            <param name="explicit_content_filter">New guild explicit content filter level</param>
            <param name="afk_channel_id">New guild AFK channel ID</param>
            <param name="afk_timeout">New guild AFK timeout in seconds</param>
            <param name="iconb64">New guild icon (base64)</param>
            <param name="owner_id">New guild owner ID</param>
            <param name="splashb64">New guild splash (base64)</param>
            <param name="systemChannelId">New guild system channel ID</param>
            <param name="banner">New guild banner</param>
            <param name="description">New guild description</param>
            <param name="discorverySplash">New guild Discovery splash</param>
            <param name="features">List of new <see href="https://discord.com/developers/docs/resources/guild#guild-object-guild-features">guild features</see></param>
            <param name="preferredLocale">New preferred locale</param>
            <param name="publicUpdatesChannelId">New updates channel ID</param>
            <param name="rulesChannelId">New rules channel ID</param>
            <param name="systemChannelFlags">New system channel flags</param>
            <param name="reason">Modify reason</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.GuildEditModel})">
            <summary>
            Modifies a guild
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="action">Guild modifications</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildBansAsync(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets guild bans.
            </summary>
            <param name="guild_id">The ID of the guild to get the bans from.</param>
            <param name="limit">The number of users to return (up to maximum 1000, default 1000).</param>
            <param name="before">Consider only users before the given user ID.</param>
            <param name="after">Consider only users after the given user ID.</param>
            <returns>A collection of the guild's bans.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildBanAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets the ban of the specified user. Requires Ban Members permission.
            </summary>
            <param name="guild_id">The ID of the guild to get the ban from.</param>
            <param name="user_id">The ID of the user to get the ban for.</param>
            <returns>A guild ban object.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildBanAsync(System.UInt64,System.UInt64,System.Int32,System.String)">
            <summary>
            Creates guild ban
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="user_id">User ID</param>
            <param name="delete_message_days">Days to delete messages</param>
            <param name="reason">Reason why this member was banned</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.RemoveGuildBanAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Removes a guild ban
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="user_id">User to unban</param>
            <param name="reason">Reason why this member was unbanned</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.LeaveGuildAsync(System.UInt64)">
            <summary>
            Leaves a guild
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.AddGuildMemberAsync(System.UInt64,System.UInt64,System.String,System.String,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordRole},System.Boolean,System.Boolean)">
            <summary>
            Adds a member to a guild
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="user_id">User ID</param>
            <param name="access_token">Access token</param>
            <param name="nick">User nickname</param>
            <param name="roles">User roles</param>
            <param name="muted">Whether this user should be muted on join</param>
            <param name="deafened">Whether this user should be deafened on join</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ListGuildMembersAsync(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.UInt64})">
            <summary>
            Gets all guild members
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="limit">Member download limit</param>
            <param name="after">Gets members after this ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.AddGuildMemberRoleAsync(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Add role to guild member
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="user_id">User ID</param>
            <param name="role_id">Role ID</param>
            <param name="reason">Reason this role gets added</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.RemoveGuildMemberRoleAsync(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Remove role from member
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="user_id">User ID</param>
            <param name="role_id">Role ID</param>
            <param name="reason">Reason this role gets removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.UpdateRolePositionAsync(System.UInt64,System.UInt64,System.Int32,System.String)">
            <summary>
            Updates a role's position
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="role_id">Role ID</param>
            <param name="position">Role position</param>
            <param name="reason">Reason this position was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.UpdateChannelPositionAsync(System.UInt64,System.UInt64,System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.UInt64})">
            <summary>
            Updates a channel's position
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="channel_id">Channel ID</param>
            <param name="position">Channel position</param>
            <param name="reason">Reason this position was modified</param>
            <param name="lockPermissions">Whether to sync channel permissions with the parent, if moving to a new category.</param>
            <param name="parentId">The new parent id if the channel is to be moved to a new category.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildWidgetAsync(System.UInt64)">
            <summary>
            Gets a guild's widget
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildWidgetSettingsAsync(System.UInt64)">
            <summary>
            Gets a guild's widget settings
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildWidgetSettingsAsync(System.UInt64,System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.String)">
            <summary>
            Modifies a guild's widget settings
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="enabled">If the widget is enabled or not</param>
            <param name="channel_id">Widget channel ID</param>
            <param name="reason">Reason the widget settings were modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildMembershipScreeningFormAsync(System.UInt64)">
            <summary>
            Gets a guild's membership screening form.
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns>The guild's membership screening form.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildMembershipScreeningFormAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.MembershipScreeningEditModel})">
            <summary>
            Modifies a guild's membership screening form.
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="action">Action to perform</param>
            <returns>The modified screening form.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildVanityUrlAsync(System.UInt64)">
            <summary>
            Gets a guild's vanity url
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <returns>The guild's vanity url.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.UpdateCurrentUserVoiceStateAsync(System.UInt64,System.UInt64,System.Nullable{System.Boolean},System.Nullable{System.DateTimeOffset})">
            <summary>
            Updates the current user's suppress state in a stage channel.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="channelId">The ID of the channel.</param>
            <param name="suppress">Toggles the suppress state.</param>
            <param name="requestToSpeakTimestamp">Sets the time the user requested to speak.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.UpdateUserVoiceStateAsync(System.UInt64,System.UInt64,System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Updates a member's suppress state in a stage channel.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="userId">The ID of the member.</param>
            <param name="channelId">The ID of the stage channel.</param>
            <param name="suppress">Toggles the member's suppress state.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildChannelAsync(System.UInt64,System.String,DSharpPlus.ChannelType,System.Nullable{System.UInt64},DSharpPlus.Entities.Optional{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordOverwriteBuilder},System.Nullable{System.Boolean},DSharpPlus.Entities.Optional{System.Nullable{System.Int32}},System.Nullable{DSharpPlus.VideoQualityMode},System.Nullable{System.Int32},System.String,System.Nullable{DSharpPlus.AutoArchiveDuration},DSharpPlus.Entities.DefaultReaction,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordForumTagBuilder},System.Nullable{DSharpPlus.DefaultSortOrder})">
            <summary>
            Creates a guild channel
            </summary>
            <param name="id">Channel ID</param>
            <param name="name">Channel name</param>
            <param name="type">Channel type</param>
            <param name="parent">Channel parent ID</param>
            <param name="topic">Channel topic</param>
            <param name="bitrate">Voice channel bitrate</param>
            <param name="userLimit">Voice channel user limit</param>
            <param name="overwrites">Channel overwrites</param>
            <param name="nsfw">Whether this channel should be marked as NSFW</param>
            <param name="perUserRateLimit">Slow mode timeout for users.</param>
            <param name="qualityMode">Voice channel video quality mode.</param>
            <param name="position">Sorting position of the channel.</param>
            <param name="reason">Reason this channel was created</param>
            <param name="defaultAutoArchiveDuration">Default duration for newly created forum posts in the channel.</param>
            <param name="defaultReactionEmoji">Default emoji used for reacting to forum posts.</param>
            <param name="availableTags">Tags available for use by forum posts in the channel.</param>
            <param name="defaultSortOrder">Default sorting order for forum posts in the channel.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyChannelAsync(System.UInt64,System.String,System.Nullable{System.Int32},DSharpPlus.Entities.Optional{System.String},System.Nullable{System.Boolean},DSharpPlus.Entities.Optional{System.Nullable{System.UInt64}},System.Nullable{System.Int32},System.Nullable{System.Int32},DSharpPlus.Entities.Optional{System.Nullable{System.Int32}},DSharpPlus.Entities.Optional{DSharpPlus.Entities.DiscordVoiceRegion},System.Nullable{DSharpPlus.VideoQualityMode},DSharpPlus.Entities.Optional{DSharpPlus.ChannelType},System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordOverwriteBuilder},System.String,DSharpPlus.Entities.Optional{DSharpPlus.ChannelFlags},System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordForumTagBuilder},DSharpPlus.Entities.Optional{System.Nullable{DSharpPlus.AutoArchiveDuration}},DSharpPlus.Entities.Optional{DSharpPlus.Entities.DefaultReaction},DSharpPlus.Entities.Optional{System.Int32},DSharpPlus.Entities.Optional{System.Nullable{DSharpPlus.DefaultSortOrder}},DSharpPlus.Entities.Optional{DSharpPlus.DefaultForumLayout})">
            <summary>
            Modifies a channel
            </summary>
            <param name="id">Channel ID</param>
            <param name="name">New channel name</param>
            <param name="position">New channel position</param>
            <param name="topic">New channel topic</param>
            <param name="nsfw">Whether this channel should be marked as NSFW</param>
            <param name="parent">New channel parent</param>
            <param name="bitrate">New voice channel bitrate</param>
            <param name="userLimit">New voice channel user limit</param>
            <param name="perUserRateLimit">Slow mode timeout for users.</param>
            <param name="rtcRegion">New region override.</param>
            <param name="qualityMode">New video quality mode.</param>
            <param name="type">New channel type.</param>
            <param name="permissionOverwrites">New channel permission overwrites.</param>
            <param name="reason">Reason why this channel was modified</param>
            <param name="flags">Channel flags.</param>
            <param name="defaultAutoArchiveDuration">Default duration for newly created forum posts in the channel.</param>
            <param name="defaultReactionEmoji">Default emoji used for reacting to forum posts.</param>
            <param name="availableTags">Tags available for use by forum posts in the channel.</param>
            <param name="defaultPerUserRatelimit">Default per-user ratelimit for forum posts in the channel.</param>
            <param name="defaultSortOrder">Default sorting order for forum posts in the channel.</param>
            <param name="defaultForumLayout">Default layout for forum posts in the channel.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyChannelAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.ChannelEditModel})">
            <summary>
            Modifies a channel
            </summary>
            <param name="channelId">Channel ID</param>
            <param name="action">Channel modifications</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetChannelAsync(System.UInt64)">
            <summary>
            Gets a channel object
            </summary>
            <param name="id">Channel ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteChannelAsync(System.UInt64,System.String)">
            <summary>
            Deletes a channel
            </summary>
            <param name="id">Channel ID</param>
            <param name="reason">Reason why this channel was deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets message in a channel
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateMessageAsync(System.UInt64,System.String)">
            <summary>
            Sends a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="content">Message (text) content</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateMessageAsync(System.UInt64,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="embed">Embed to attach</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateMessageAsync(System.UInt64,System.String,DSharpPlus.Entities.DiscordEmbed)">
            <summary>
            Sends a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="content">Message (text) content</param>
            <param name="embed">Embed to attach</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateMessageAsync(System.UInt64,DSharpPlus.Entities.DiscordMessageBuilder)">
            <summary>
            Sends a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="builder">The Discord Message builder.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateMessageAsync(System.UInt64,System.Action{DSharpPlus.Entities.DiscordMessageBuilder})">
            <summary>
            Sends a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="action">The Discord Message builder.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildChannelsAsync(System.UInt64)">
            <summary>
            Gets channels from a guild
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetChannelMessagesAsync(System.UInt64,System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets messages from a channel
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="limit">Limit of messages to get</param>
            <param name="before">Gets messages before this ID</param>
            <param name="after">Gets messages after this ID</param>
            <param name="around">Gets messages around this ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetChannelMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a message from a channel
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditMessageAsync(System.UInt64,System.UInt64,DSharpPlus.Entities.Optional{System.String})">
            <summary>
            Edits a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="content">New message content</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditMessageAsync(System.UInt64,System.UInt64,DSharpPlus.Entities.Optional{DSharpPlus.Entities.DiscordEmbed})">
            <summary>
            Edits a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="embed">New message embed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditMessageAsync(System.UInt64,System.UInt64,DSharpPlus.Entities.DiscordMessageBuilder,System.Boolean,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordAttachment})">
            <summary>
            Edits a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="builder">The builder of the message to edit.</param>
            <param name="suppressEmbeds">Whether to suppress embeds on the message.</param>
            <param name="attachments">Attached files to keep.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyEmbedSuppressionAsync(System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            Modifies the visibility of embeds in a message.
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="hideEmbeds">Whether to hide all embeds.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteMessageAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="reason">Why this message was deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteMessagesAsync(System.UInt64,System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Deletes multiple messages
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_ids">Message IDs</param>
            <param name="reason">Reason these messages were deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetChannelInvitesAsync(System.UInt64)">
            <summary>
            Gets a channel's invites
            </summary>
            <param name="channel_id">Channel ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateChannelInviteAsync(System.UInt64,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.Nullable{DSharpPlus.InviteTargetType},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Creates a channel invite
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="max_age">For how long the invite should exist</param>
            <param name="max_uses">How often the invite may be used</param>
            <param name="temporary">Whether this invite should be temporary</param>
            <param name="unique">Whether this invite should be unique (false might return an existing invite)</param>
            <param name="reason">Why you made an invite</param>
            <param name="targetType">The target type of the invite, for stream and embedded application invites.</param>
            <param name="targetUserId">The ID of the target user.</param>
            <param name="targetApplicationId">The ID of the target application.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteChannelPermissionAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes channel overwrite
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="overwrite_id">Overwrite ID</param>
            <param name="reason">Reason it was deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditChannelPermissionsAsync(System.UInt64,System.UInt64,DSharpPlus.Permissions,DSharpPlus.Permissions,System.String,System.String)">
            <summary>
            Edits channel overwrite
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="overwrite_id">Overwrite ID</param>
            <param name="allow">Permissions to allow</param>
            <param name="deny">Permissions to deny</param>
            <param name="type">Overwrite type</param>
            <param name="reason">Reason this overwrite was created</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.TriggerTypingAsync(System.UInt64)">
            <summary>
            Send a typing indicator to a channel
            </summary>
            <param name="channel_id">Channel ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetPinnedMessagesAsync(System.UInt64)">
            <summary>
            Gets pinned messages
            </summary>
            <param name="channel_id">Channel ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.UnpinMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Unpins a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.JoinGroupDmAsync(System.UInt64,System.String)">
            <summary>
            Joins a group DM
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="nickname">DM nickname</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GroupDmAddRecipientAsync(System.UInt64,System.UInt64,System.String,System.String)">
            <summary>
            Adds a member to a group DM
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="user_id">User ID</param>
            <param name="access_token">User's access token</param>
            <param name="nickname">Nickname for user</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.LeaveGroupDmAsync(System.UInt64)">
            <summary>
            Leaves a group DM
            </summary>
            <param name="channel_id">Channel ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GroupDmRemoveRecipientAsync(System.UInt64,System.UInt64)">
            <summary>
            Removes a member from a group DM
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="user_id">User ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGroupDmAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.UInt64,System.String})">
            <summary>
            Creates a group DM
            </summary>
            <param name="access_tokens">Access tokens</param>
            <param name="nicks">Nicknames per user</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGroupDmWithCurrentUserAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.UInt64,System.String})">
            <summary>
            Creates a group DM with current user
            </summary>
            <param name="access_tokens">Access tokens</param>
            <param name="nicks">Nicknames</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateDmAsync(System.UInt64)">
            <summary>
            Creates a DM
            </summary>
            <param name="recipient_id">Recipient user ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.FollowChannelAsync(System.UInt64,System.UInt64)">
            <summary>
            Follows a news channel
            </summary>
            <param name="channel_id">ID of the channel to follow</param>
            <param name="webhook_channel_id">ID of the channel to crosspost messages to</param>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">Thrown when the current user doesn't have <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> on the target channel</exception>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CrosspostMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Publishes a message in a news channel to following channels
            </summary>
            <param name="channel_id">ID of the news channel the message to crosspost belongs to</param>
            <param name="message_id">ID of the message to crosspost</param>
            <exception cref="T:DSharpPlus.Exceptions.UnauthorizedException">
                Thrown when the current user doesn't have <see cref="F:DSharpPlus.Permissions.ManageWebhooks"/> and/or <see cref="F:DSharpPlus.Permissions.SendMessages"/>
            </exception>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateStageInstanceAsync(System.UInt64,System.String,System.Nullable{DSharpPlus.PrivacyLevel},System.String)">
            <summary>
            Creates a stage instance in a stage channel.
            </summary>
            <param name="channelId">The ID of the stage channel to create it in.</param>
            <param name="topic">The topic of the stage instance.</param>
            <param name="privacyLevel">The privacy level of the stage instance.</param>
            <param name="reason">The reason the stage instance was created.</param>
            <returns>The created stage instance.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetStageInstanceAsync(System.UInt64)">
            <summary>
            Gets a stage instance in a stage channel.
            </summary>
            <param name="channelId">The ID of the channel.</param>
            <returns>The stage instance in the channel.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyStageInstanceAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.StageInstanceEditModel})">
            <summary>
            Modifies a stage instance in a stage channel.
            </summary>
            <param name="channelId">The ID of the channel to modify the stage instance of.</param>
            <param name="action">Action to perform.</param>
            <returns>The modified stage instance.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteStageInstanceAsync(System.UInt64,System.String)">
            <summary>
            Deletes a stage instance in a stage channel.
            </summary>
            <param name="channelId">The ID of the channel to delete the stage instance of.</param>
            <param name="reason">The reason the stage instance was deleted.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.PinMessageAsync(System.UInt64,System.UInt64)">
            <summary>
            Pins a message.
            </summary>
            <param name="channelId">The ID of the channel the message is in.</param>
            <param name="messageId">The ID of the message.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetCurrentUserAsync">
            <summary>
            Gets current user object
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetUserAsync(System.UInt64)">
            <summary>
            Gets user object
            </summary>
            <param name="user">User ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildMemberAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets guild member
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="member_id">Member ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.RemoveGuildMemberAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Removes guild member
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="user_id">User ID</param>
            <param name="reason">Why this user was removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyCurrentUserAsync(System.String,System.String)">
            <summary>
            Modifies current user
            </summary>
            <param name="username">New username</param>
            <param name="base64_avatar">New avatar (base64)</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyCurrentUserAsync(System.String,System.IO.Stream)">
            <summary>
            Modifies current user
            </summary>
            <param name="username">username</param>
            <param name="avatar">avatar</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetCurrentUserGuildsAsync(System.Int32,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Gets current user's guilds
            </summary>
            <param name="limit">Limit of guilds to get</param>
            <param name="before">Gets guild before ID</param>
            <param name="after">Gets guilds after ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildMemberAsync(System.UInt64,System.UInt64,DSharpPlus.Entities.Optional{System.String},DSharpPlus.Entities.Optional{System.Collections.Generic.IEnumerable{System.UInt64}},DSharpPlus.Entities.Optional{System.Boolean},DSharpPlus.Entities.Optional{System.Boolean},DSharpPlus.Entities.Optional{System.Nullable{System.UInt64}},DSharpPlus.Entities.Optional{System.Nullable{System.DateTimeOffset}},System.String)">
            <summary>
            Modifies guild member.
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="user_id">User ID</param>
            <param name="nick">New nickname</param>
            <param name="role_ids">New roles</param>
            <param name="mute">Whether this user should be muted</param>
            <param name="deaf">Whether this user should be deafened</param>
            <param name="voice_channel_id">Voice channel to move this user to</param>
            <param name="communication_disabled_until">How long this member should be timed out for. Requires MODERATE_MEMBERS permission.</param>
            <param name="reason">Reason this user was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyAsync(System.UInt64,System.UInt64,System.Action{DSharpPlus.Net.Models.MemberEditModel})">
            <summary>
            Modifies a member
            </summary>
            <param name="member_id">Member ID</param>
            <param name="guild_id">Guild ID</param>
            <param name="action">Modifications</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyCurrentMemberNicknameAsync(System.UInt64,System.String,System.String)">
            <summary>
            Changes current user's nickname
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="nick">Nickname</param>
            <param name="reason">Reason why you set it to this</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyCurrentMemberAsync(System.UInt64,System.String,System.String)">
            <summary>
            Changes the current user in a guild.
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="nickname">Nickname to set</param>
            <param name="reason">Audit log reason</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildRolesAsync(System.UInt64)">
            <summary>
            Gets roles
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildAsync(System.UInt64,System.Nullable{System.Boolean})">
            <summary>
            Gets a guild.
            </summary>
            <param name="guild_id">The guild ID to search for.</param>
            <param name="with_counts">Whether to include approximate presence and member counts in the returned guild.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildRoleAsync(System.UInt64,System.UInt64,System.String,System.Nullable{DSharpPlus.Permissions},System.Nullable{DSharpPlus.Entities.DiscordColor},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.IO.Stream,DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Modifies a role
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="role_id">Role ID</param>
            <param name="name">New role name</param>
            <param name="permissions">New role permissions</param>
            <param name="color">New role color</param>
            <param name="hoist">Whether this role should be hoisted</param>
            <param name="mentionable">Whether this role should be mentionable</param>
            <param name="reason">Why this role was modified</param>
            <param name="icon">The icon to add to this role</param>
            <param name="emoji">The emoji to add to this role. Must be unicode.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildRoleAsync(System.UInt64,System.UInt64,System.Action{DSharpPlus.Net.Models.RoleEditModel})">
            <summary>
            Modifies a role
            </summary>
            <param name="role_id">Role ID</param>
            <param name="guild_id">Guild ID</param>
            <param name="action">Modifications</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGuildRoleAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes a role
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="role_id">Role ID</param>
            <param name="reason">Reason why this role was deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildRoleAsync(System.UInt64,System.String,System.Nullable{DSharpPlus.Permissions},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.IO.Stream,DSharpPlus.Entities.DiscordEmoji)">
            <summary>
            Creates a new role
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="name">Role name</param>
            <param name="permissions">Role permissions</param>
            <param name="color">Role color</param>
            <param name="hoist">Whether this role should be hoisted</param>
            <param name="mentionable">Whether this role should be mentionable</param>
            <param name="reason">Reason why this role was created</param>
            <param name="icon">The icon to add to this role</param>
            <param name="emoji">The emoji to add to this role. Must be unicode.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildPruneCountAsync(System.UInt64,System.Int32,System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Get a guild's prune count.
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="days">Days to check for</param>
            <param name="include_roles">The roles to be included in the prune.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.BeginGuildPruneAsync(System.UInt64,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Begins a guild prune.
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="days">Days to prune for</param>
            <param name="compute_prune_count">Whether to return the prune count after this method completes. This is discouraged for larger guilds.</param>
            <param name="include_roles">The roles to be included in the prune.</param>
            <param name="reason">Reason why this guild was pruned</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildIntegrationsAsync(System.UInt64)">
            <summary>
            Gets guild integrations
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildIntegrationAsync(System.UInt64,System.String,System.UInt64)">
            <summary>
            Creates guild integration
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="type">Integration type</param>
            <param name="id">Integration id</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildIntegrationAsync(System.UInt64,System.UInt64,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Modifies a guild integration
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="integration_id">Integration ID</param>
            <param name="expire_behaviour">Expiration behaviour</param>
            <param name="expire_grace_period">Expiration grace period</param>
            <param name="enable_emoticons">Whether to enable emojis for this integration</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGuildIntegrationAsync(System.UInt64,DSharpPlus.Entities.DiscordIntegration,System.String)">
            <summary>
            Removes a guild integration
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="integration">Integration to remove</param>
            <param name="reason">Reason why this integration was removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.SyncGuildIntegrationAsync(System.UInt64,System.UInt64)">
            <summary>
            Syncs guild integration
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="integration_id">Integration ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildVoiceRegionsAsync(System.UInt64)">
            <summary>
            Get a guild's voice region
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildInvitesAsync(System.UInt64)">
            <summary>
            Get a guild's invites
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildTemplatesAsync(System.UInt64)">
            <summary>
            Gets a guild's templates.
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns>All of the guild's templates.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildTemplateAsync(System.UInt64,System.String,System.String)">
            <summary>
            Creates a guild template.
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="name">Name of the template.</param>
            <param name="description">Description of the template.</param>
            <returns>The template created.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.SyncGuildTemplateAsync(System.UInt64,System.String)">
            <summary>
            Syncs the template to the current guild's state.
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="code">The code of the template to sync.</param>
            <returns>The template synced.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildTemplateAsync(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Modifies the template's metadata.
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="code">The template's code.</param>
            <param name="name">Name of the template.</param>
            <param name="description">Description of the template.</param>
            <returns>The template modified.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGuildTemplateAsync(System.UInt64,System.String)">
            <summary>
            Deletes the template.
            </summary>
            <param name="guild_id">Guild ID</param>
            <param name="code">The code of the template to delete.</param>
            <returns>The deleted template.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildWelcomeScreenAsync(System.UInt64)">
            <summary>
            Gets a guild's welcome screen.
            </summary>
            <returns>The guild's welcome screen object.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildWelcomeScreenAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.WelcomeScreenEditModel},System.String)">
            <summary>
            Modifies a guild's welcome screen.
            </summary>
            <param name="guildId">The guild ID to modify.</param>
            <param name="action">Action to perform.</param>
            <param name="reason">The audit log reason for this action.</param>
            <returns>The modified welcome screen.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildPreviewAsync(System.UInt64)">
            <summary>
            Gets a guild preview.
            </summary>
            <param name="guildId">The ID of the guild.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetInviteAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Gets an invite.
            </summary>
            <param name="invite_code">The invite code.</param>
            <param name="withCounts">Whether to include presence and total member counts in the returned invite.</param>
            <param name="withExpiration">Whether to include the expiration date in the returned invite.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteInvite(System.String,System.String)">
            <summary>
            Removes an invite
            </summary>
            <param name="invite_code">Invite code</param>
            <param name="reason">Reason why this invite was removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetUsersConnectionsAsync">
            <summary>
            Gets current user's connections
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateWebhookAsync(System.UInt64,System.String,System.String,System.String)">
            <summary>
            Creates a new webhook
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="name">Webhook name</param>
            <param name="base64_avatar">Webhook avatar (base64)</param>
            <param name="reason">Reason why this webhook was created</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateWebhookAsync(System.UInt64,System.String,System.IO.Stream,System.String)">
            <summary>
            Creates a new webhook
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="name">Webhook name</param>
            <param name="avatar">Webhook avatar</param>
            <param name="reason">Reason why this webhook was created</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetChannelWebhooksAsync(System.UInt64)">
            <summary>
            Gets all webhooks from a channel
            </summary>
            <param name="channel_id">Channel ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildWebhooksAsync(System.UInt64)">
            <summary>
            Gets all webhooks from a guild
            </summary>
            <param name="guild_id">Guild ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetWebhookAsync(System.UInt64)">
            <summary>
            Gets a webhook
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetWebhookWithTokenAsync(System.UInt64,System.String)">
            <summary>
            Gets a webhook with its token (when user is not in said guild)
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <param name="webhook_token">Webhook token</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyWebhookAsync(System.UInt64,System.UInt64,System.String,System.String,System.String)">
            <summary>
            Modifies a webhook
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <param name="channelId">The new channel ID the webhook should be moved to.</param>
            <param name="name">New webhook name</param>
            <param name="base64_avatar">New webhook avatar (base64)</param>
            <param name="reason">Reason why this webhook was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyWebhookAsync(System.UInt64,System.UInt64,System.String,System.IO.Stream,System.String)">
            <summary>
            Modifies a webhook
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <param name="channelId">The new channel ID the webhook should be moved to.</param>
            <param name="name">New webhook name</param>
            <param name="avatar">New webhook avatar</param>
            <param name="reason">Reason why this webhook was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyWebhookAsync(System.UInt64,System.String,System.String,System.String,System.String)">
            <summary>
            Modifies a webhook (when user is not in said guild)
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <param name="name">New webhook name</param>
            <param name="base64_avatar">New webhook avatar (base64)</param>
            <param name="webhook_token">Webhook token</param>
            <param name="reason">Reason why this webhook was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyWebhookAsync(System.UInt64,System.String,System.IO.Stream,System.String,System.String)">
            <summary>
            Modifies a webhook (when user is not in said guild)
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <param name="name">New webhook name</param>
            <param name="avatar">New webhook avatar</param>
            <param name="webhook_token">Webhook token</param>
            <param name="reason">Reason why this webhook was modified</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteWebhookAsync(System.UInt64,System.String)">
            <summary>
            Deletes a webhook
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <param name="reason">Reason this webhook was deleted</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteWebhookAsync(System.UInt64,System.String,System.String)">
            <summary>
            Deletes a webhook (when user is not in said guild)
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <param name="reason">Reason this webhook was removed</param>
            <param name="webhook_token">Webhook token</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ExecuteWebhookAsync(System.UInt64,System.String,DSharpPlus.Entities.DiscordWebhookBuilder)">
            <summary>
            Sends a message to a webhook
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <param name="webhook_token">Webhook token</param>
            <param name="builder">Webhook builder filled with data to send.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditWebhookMessageAsync(System.UInt64,System.String,System.UInt64,DSharpPlus.Entities.DiscordWebhookBuilder,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordAttachment})">
            <summary>
            Edits a previously-sent webhook message.
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <param name="webhook_token">Webhook token</param>
            <param name="messageId">The ID of the message to edit.</param>
            <param name="builder">The builder of the message to edit.</param>
            <param name="attachments">Attached files to keep.</param>
            <returns>The modified <see cref="T:DSharpPlus.Entities.DiscordMessage"/></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteWebhookMessageAsync(System.UInt64,System.String,System.UInt64)">
            <summary>
            Deletes a message that was created by a webhook.
            </summary>
            <param name="webhook_id">Webhook ID</param>
            <param name="webhook_token">Webhook token</param>
            <param name="messageId">The ID of the message to delete</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateReactionAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Creates a new reaction
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="emoji">Emoji to react</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteOwnReactionAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes own reaction
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="emoji">Emoji to remove from reaction</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteUserReactionAsync(System.UInt64,System.UInt64,System.UInt64,System.String,System.String)">
            <summary>
            Deletes someone elses reaction
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="user_id">User ID</param>
            <param name="emoji">Emoji to remove</param>
            <param name="reason">Reason why this reaction was removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetReactionsAsync(System.UInt64,System.UInt64,System.String,System.Nullable{System.UInt64},System.Int32)">
            <summary>
            Gets all users that reacted with a specific emoji to a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="emoji">Emoji to check for</param>
            <param name="after_id">Whether to search for reactions after this message id.</param>
            <param name="limit">The maximum amount of reactions to fetch.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetReactionsAsync(System.UInt64,System.UInt64,DSharpPlus.Entities.DiscordEmoji,System.Nullable{System.UInt64},System.Int32)">
            <summary>
            Gets all users that reacted with a specific emoji to a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="emoji">Emoji to check for</param>
            <param name="after_id">Whether to search for reactions after this message id.</param>
            <param name="limit">The maximum amount of reactions to fetch.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteAllReactionsAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes all reactions from a message
            </summary>
            <param name="channel_id">Channel ID</param>
            <param name="message_id">Message ID</param>
            <param name="reason">Reason why all reactions were removed</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteReactionsEmojiAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes all reactions of a specific reaction for a message.
            </summary>
            <param name="channelid">The ID of the channel.</param>
            <param name="messageId">The ID of the message.</param>
            <param name="emoji">The emoji to clear.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGlobalApplicationCommandsAsync">
            <summary>
            Gets all the global application commands for this application.
            </summary>
            <returns>A list of global application commands.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.BulkOverwriteGlobalApplicationCommandsAsync(System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommand})">
            <summary>
            Overwrites the existing global application commands. New commands are automatically created and missing commands are automatically deleted.
            </summary>
            <param name="commands">The list of commands to overwrite with.</param>
            <returns>The list of global commands.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGlobalApplicationCommandAsync(DSharpPlus.Entities.DiscordApplicationCommand)">
            <summary>
            Creates or overwrites a global application command.
            </summary>
            <param name="command">The command to create.</param>
            <returns>The created command.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGlobalApplicationCommandAsync(System.UInt64)">
            <summary>
            Gets a global application command by its ID.
            </summary>
            <param name="commandId">The ID of the command to get.</param>
            <returns>The command with the ID.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditGlobalApplicationCommandAsync(System.UInt64,System.Action{DSharpPlus.Net.Models.ApplicationCommandEditModel})">
            <summary>
            Edits a global application command.
            </summary>
            <param name="commandId">The ID of the command to edit.</param>
            <param name="action">Action to perform.</param>
            <returns>The edited command.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGlobalApplicationCommandAsync(System.UInt64)">
            <summary>
            Deletes a global application command.
            </summary>
            <param name="commandId">The ID of the command to delete.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildApplicationCommandsAsync(System.UInt64)">
            <summary>
            Gets all the application commands for a guild.
            </summary>
            <param name="guildId">The ID of the guild to get application commands for.</param>
            <returns>A list of application commands in the guild.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.BulkOverwriteGuildApplicationCommandsAsync(System.UInt64,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommand})">
            <summary>
            Overwrites the existing application commands in a guild. New commands are automatically created and missing commands are automatically deleted.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="commands">The list of commands to overwrite with.</param>
            <returns>The list of guild commands.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildApplicationCommandAsync(System.UInt64,DSharpPlus.Entities.DiscordApplicationCommand)">
            <summary>
            Creates or overwrites a guild application command.
            </summary>
            <param name="guildId">The ID of the guild to create the application command in.</param>
            <param name="command">The command to create.</param>
            <returns>The created command.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildApplicationCommandAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a application command in a guild by its ID.
            </summary>
            <param name="guildId">The ID of the guild the application command is in.</param>
            <param name="commandId">The ID of the command to get.</param>
            <returns>The command with the ID.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditGuildApplicationCommandAsync(System.UInt64,System.UInt64,System.Action{DSharpPlus.Net.Models.ApplicationCommandEditModel})">
            <summary>
            Edits a application command in a guild.
            </summary>
            <param name="guildId">The ID of the guild the application command is in.</param>
            <param name="commandId">The ID of the command to edit.</param>
            <param name="action">Action to perform.</param>
            <returns>The edited command.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGuildApplicationCommandAsync(System.UInt64,System.UInt64)">
            <summary>
            Deletes a application command in a guild.
            </summary>
            <param name="guildId">The ID of the guild to delete the application command in.</param>
            <param name="commandId">The ID of the command.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateInteractionResponseAsync(System.UInt64,System.String,DSharpPlus.InteractionResponseType,DSharpPlus.Entities.DiscordInteractionResponseBuilder)">
            <summary>
            Creates a response to an interaction.
            </summary>
            <param name="interactionId">The ID of the interaction.</param>
            <param name="interactionToken">The token of the interaction</param>
            <param name="type">The type of the response.</param>
            <param name="builder">The data, if any, to send.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetOriginalInteractionResponseAsync(System.String)">
            <summary>
            Gets the original interaction response.
            </summary>
            <returns>The original message that was sent. This <b>does not work on ephemeral messages.</b></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditOriginalInteractionResponseAsync(System.String,DSharpPlus.Entities.DiscordWebhookBuilder,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordAttachment})">
            <summary>
            Edits the original interaction response.
            </summary>
            <param name="interactionToken">The token of the interaction.</param>
            <param name="builder">The webhook builder.</param>
            <param name="attachments">Attached files to keep.</param>
            <returns>The <see cref="T:DSharpPlus.Entities.DiscordMessage"/> edited.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteOriginalInteractionResponseAsync(System.String)">
            <summary>
            Deletes the original interaction response.
            <param name="interactionToken">The token of the interaction.</param>
            </summary>>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateFollowupMessageAsync(System.String,DSharpPlus.Entities.DiscordFollowupMessageBuilder)">
            <summary>
            Creates a follow up message to an interaction.
            </summary>
            <param name="interactionToken">The token of the interaction.</param>
            <param name="builder">The webhook builder.</param>
            <returns>The <see cref="T:DSharpPlus.Entities.DiscordMessage"/> created.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditFollowupMessageAsync(System.String,System.UInt64,DSharpPlus.Entities.DiscordWebhookBuilder,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordAttachment})">
            <summary>
            Edits a follow up message.
            </summary>
            <param name="interactionToken">The token of the interaction.</param>
            <param name="messageId">The ID of the follow up message.</param>
            <param name="builder">The webhook builder.</param>
            <param name="attachments">Attached files to keep.</param>
            <returns>The <see cref="T:DSharpPlus.Entities.DiscordMessage"/> edited.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteFollowupMessageAsync(System.String,System.UInt64)">
            <summary>
            Deletes a follow up message.
            </summary>
            <param name="interactionToken">The token of the interaction.</param>
            <param name="messageId">The ID of the follow up message.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildApplicationCommandsPermissionsAsync(System.UInt64)">
            <summary>
            Gets all application command permissions in a guild.
            </summary>
            <param name="guildId">The guild ID.</param>
            <returns>A list of permissions.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildApplicationCommandPermissionsAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets permissions for a application command in a guild.
            </summary>
            <param name="guildId">The guild ID.</param>
            <param name="commandId">The ID of the command to get them for.</param>
            <returns>The permissions.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.EditApplicationCommandPermissionsAsync(System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordApplicationCommandPermission})">
            <summary>
            Edits permissions for a application command in a guild.
            </summary>
            <param name="guildId">The guild ID.</param>
            <param name="commandId">The ID of the command to edit permissions for.</param>
            <param name="permissions">The list of permissions to use.</param>
            <returns>The edited permissions.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.BatchEditApplicationCommandPermissionsAsync(System.UInt64,System.Collections.Generic.IEnumerable{DSharpPlus.Entities.DiscordGuildApplicationCommandPermissions})">
            <summary>
            Batch edits permissions for a application command in a guild.
            </summary>
            <param name="guildId">The guild ID.</param>
            <param name="permissions">The list of permissions to use.</param>
            <returns>A list of edited permissions.</returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildStickerAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a sticker from a guild.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="stickerId">The ID of the sticker.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetStickerAsync(System.UInt64)">
            <summary>
            Gets a sticker by its ID.
            </summary>
            <param name="stickerId">The ID of the sticker.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetStickerPacksAsync">
            <summary>
            Gets a collection of sticker packs that may be used by nitro users.
            </summary>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildStickersAsync(System.UInt64)">
            <summary>
            Gets a list of stickers from a guild.
            </summary>
            <param name="guildId">The ID of the guild.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateGuildStickerAsync(System.UInt64,System.String,System.String,System.String,System.IO.Stream,DSharpPlus.Entities.StickerFormat,System.String)">
            <summary>
            Creates a sticker in a guild.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="name">The name of the sticker.</param>
            <param name="description">The description of the sticker.</param>
            <param name="tags">The tags of the sticker.</param>
            <param name="imageContents">The image content of the sticker.</param>
            <param name="format">The image format of the sticker.</param>
            <param name="reason">The reason this sticker is being created.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildStickerAsync(System.UInt64,System.UInt64,System.Action{DSharpPlus.Net.Models.StickerEditModel},System.String)">
            <summary>
            Modifies a sticker in a guild.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="stickerId">The ID of the sticker.</param>
            <param name="action">Action to perform.</param>
            <param name="reason">Reason for audit log.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGuildStickerAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes a sticker in a guild.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="stickerId">The ID of the sticker.</param>
            <param name="reason">Reason for audit log.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateThreadFromMessageAsync(System.UInt64,System.UInt64,System.String,DSharpPlus.AutoArchiveDuration,System.String)">
            <summary>
            Creates a thread from a message.
            </summary>
            <param name="channelId">The ID of the channel.</param>
            <param name="messageId">The ID of the message </param>
            <param name="name">The name of the thread.</param>
            <param name="archiveAfter">The auto archive duration.</param>
            <param name="reason">Reason for audit logs.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateThreadAsync(System.UInt64,System.String,DSharpPlus.AutoArchiveDuration,DSharpPlus.ChannelType,System.String)">
            <summary>
            Creates a thread.
            </summary>
            <param name="channelId">The ID of the channel.</param>
            <param name="name">The name of the thread.</param>
            <param name="archiveAfter">The auto archive duration.</param>
            <param name="threadType">The type of the thread.</param>
            <param name="reason">Reason for audit logs.</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.JoinThreadAsync(System.UInt64)">
            <summary>
            Joins a thread.
            </summary>
            <param name="threadId">The ID of the thread.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.LeaveThreadAsync(System.UInt64)">
            <summary>
            Leaves a thread.
            </summary>
            <param name="threadId">The ID of the thread.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.AddThreadMemberAsync(System.UInt64,System.UInt64)">
            <summary>
            Adds a member to a thread.
            </summary>
            <param name="threadId">The ID of the thread.</param>
            <param name="userId">The ID of the member.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.RemoveThreadMemberAsync(System.UInt64,System.UInt64)">
            <summary>
            Removes a member from a thread.
            </summary>
            <param name="threadId">The ID of the thread.</param>
            <param name="userId">The ID of the member.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ListThreadMembersAsync(System.UInt64)">
            <summary>
            Lists the members of a thread.
            </summary>
            <param name="threadId">The ID of the thread.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ListActiveThreadAsync(System.UInt64)">
            <summary>
            Lists the active threads of a guild.
            </summary>
            <param name="guildId">The ID of the guild.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ListPublicArchivedThreadsAsync(System.UInt64,System.UInt64,System.Nullable{System.DateTimeOffset},System.Int32)">
            <summary>
            Gets the threads that are public and archived for a channel.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="channelId">The ID of the channel.</param>
            <param name="before">Date to filter by.</param>
            <param name="limit">Limit.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ListPrivateArchivedThreadAsync(System.UInt64,System.UInt64,System.Nullable{System.DateTimeOffset},System.Int32)">
            <summary>
            Gets the threads that are public and archived for a channel.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="channelId">The ID of the channel.</param>
            <param name="before">Date to filter by.</param>
            <param name="limit">Limit.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ListJoinedPrivateArchivedThreadsAsync(System.UInt64,System.UInt64,System.Nullable{System.DateTimeOffset},System.Int32)">
            <summary>
            Gets the private archived threads the user has joined for a channel.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="channelId">The ID of the channel.</param>
            <param name="before">Date to filter by.</param>
            <param name="limit">Limit.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildEmojisAsync(System.UInt64)">
            <summary>
            Gets a guild's emojis.
            </summary>
            <param name="guildId">The ID of the guild.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetGuildEmojiAsync(System.UInt64,System.UInt64)">
            <summary>
            Gets a guild emoji.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="emojiId">The ID of the emoji.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.CreateEmojiAsync(System.UInt64,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Creates an emoji in a guild.
            </summary>
            <param name="name">Name of the emoji.</param>
            <param name="guildId">The ID of the guild.</param>
            <param name="image">Image to use as the emoji.</param>
            <param name="roles">Roles for which the emoji will be available.</param>
            <param name="reason">Reason for audit logs.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.ModifyGuildEmojiAsync(System.UInt64,System.UInt64,System.String,System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Modifies a guild's emoji.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="emojiId">The ID of the emoji.</param>
            <param name="name">New name of the emoji.</param>
            <param name="roles">Roles for which the emoji will be available.</param>
            <param name="reason">Reason for audit logs.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.DeleteGuildEmojiAsync(System.UInt64,System.UInt64,System.String)">
            <summary>
            Deletes a guild's emoji.
            </summary>
            <param name="guildId">The ID of the guild.</param>
            <param name="emojiId">The ID of the emoji.</param>
            <param name="reason">Reason for audit logs.</param>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetApplicationAssetsAsync(DSharpPlus.Entities.DiscordApplication)">
            <summary>
            Gets assets from an application
            </summary>
            <param name="application">Application to get assets from</param>
            <returns></returns>
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.GetTemplateAsync(System.String)">
            <summary>
            Gets a guild template by the code.
            </summary>
            <param name="code">The code of the template.</param>
            <returns>The guild template for the code.</returns>\
        </member>
        <member name="M:DSharpPlus.DiscordRestClient.Dispose">
            <summary>
            Disposes of this DiscordRestClient
            </summary>
        </member>
    </members>
</doc>
